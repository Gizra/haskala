<?php
/**
 * @file
 * Code for the Haskala Book feature.
 */

include_once 'haskala_book.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function haskala_book_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 *  Prefaces tab - role in book production of preface writer.
 *  Book producers tab - all fields from production bundle.
 *
 *  @param $book_nid
 *   The book node ID.
 *  @param $person_nid
 *   The writer person node ID.
 *
 *  @return production details nodes.
 */
function haskala_book_get_production($book_nid, $person_nid = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'production')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_book', 'target_id', $book_nid);
  if ($person_nid) {
    $query->fieldCondition('field_producer', 'target_id', $person_nid);
  }
  $result = $query->execute();
  if (empty($result['node'])) {
    return;
  }
  // If filter by person also, we should get single result.
  if ($person_nid) {
    return node_load(reset($result['node'])->nid);
  }
  return node_load_multiple(array_keys($result['node']));
}


/**
 *  Get tab group fields.
 *
 *  @param $wrapper
 *   The wrapper object.
 *  @param $tab
 *   The tab info.
 *  @param $node_view
 *   The node view array for weight field info.
 * @param $book_nid
 *   The book nid.
 *
 *  @return tab fields array.
 */
function haskala_book_get_tab_fields($wrapper, $tab, $node_view, $book_nid) {
  if (empty($tab->children)) {
    return;
  }

  // Sort fields by weight.
  $tab_fields_sorted = array();

  // Tab sub groups fields.
  $sub_tabs_fields = array();

  foreach ($tab->children as $child_name) {

    // If exist sub group. Ex.:Target audience tab contains sub groups.
    if (substr($child_name, 0, 5) == 'group') {
      $sub_tab = field_group_load_field_group($child_name, 'node', 'book', 'default');
      // Recursive call.
      $sub_tabs_fields[$child_name] = haskala_book_get_tab_fields($wrapper, $sub_tab, $node_view, $book_nid);
      if ($sub_tabs_fields[$child_name]) {
        // Add sub title at the beginning of the array.
        $sub_tabs_fields[$child_name] = array('sub_title' => $sub_tab->label) + $sub_tabs_fields[$child_name];

        $sub_tabs_fields[$child_name]['weight'] = $sub_tab->weight;
      }
    }
    elseif ($wrapper->$child_name->value()) {
      $weight = $node_view[$child_name]['#weight'];
      $tab_fields_sorted[$weight] = $child_name;
    }
  }

  if ($sub_tabs_fields) {
    // Sort sub groups by weight.
    uasort($sub_tabs_fields, 'drupal_sort_weight');
    // Delete weight element.
    foreach (array_keys($sub_tabs_fields) as $sub_tab_name){
      unset($sub_tabs_fields[$sub_tab_name]['weight']);
    }
    $tab_fields = $sub_tabs_fields;
  }

  // Fields of the main tab.
  $tab_fields_main = array();
  ksort($tab_fields_sorted);
  foreach ($tab_fields_sorted as $field_name) {
    // Check if the field isn't empty.
    if ($wrapper->$field_name->value()) {
      $field = render($node_view[$field_name]);
      $tab_fields_main[] = $field;

      // Other names for the author.
      if ($field_name == 'field_original_author') {
        $author_names_as_field = haskala_person_get_names($wrapper->$field_name->value()->nid);
      }

      // Role of preface writer.
      if ($field_name == 'field_writer_of_preface') {
        $production_node = haskala_book_get_production($book_nid, $wrapper->$field_name->value()->nid);
        if ($production_node) {
          $field = field_view_field('node', $production_node, 'field_role');
          $tab_fields_main[] = $field;
        }
      }
    }
  }

  // Add $author_names to translation tab.
  if ($tab->label == 'Translation' && isset($author_names_as_field)){
    // Move the translation general notes if exist to the end.
    $notes_key = key(preg_grep('/field-translation-notes/', $tab_fields_main));
    $tab_fields_main[] = $author_names_as_field;
    if ($notes_key) {
      $notes_element = $tab_fields_main[$notes_key];
      unset($tab_fields_main[$notes_key]);
      $tab_fields_main[] = $notes_element;
    }
  }

  if ($tab_fields_main) {
    if ($sub_tabs_fields) {
      $tab_fields['main'] = $tab_fields_main;
    }
    else{
      $tab_fields = $tab_fields_main;
    }
  }

  return $tab_fields;
}

/**
 *  Persons mentioned in book tab.
 *
 *  @param $book_nid
 *   The book node ID.
 *
 *  @return multi mentions fields .
 */
function haskala_book_get_mentions($book_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'mention')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_book', 'target_id', $book_nid);
  $result = $query->execute();
  if (empty($result['node'])) {
    return;
  }
  $mention_nodes = node_load_multiple(array_keys($result['node']));
  if (!$mention_nodes) {
    return;
  }
  $mentions_fields = array();
  foreach($mention_nodes as $mention_node) {
    $mentionee_fields = array();
    $mention_wrapper = entity_metadata_wrapper('node', $mention_node);
    //$mention_node_view = node_view($mention_node);
    if ($mention_wrapper->field_mentionee->value()) {
      $person_node = node_load($mention_wrapper->field_mentionee->value()->nid);
      $person_wrapper = entity_metadata_wrapper('node', $person_node);
      if ($person_wrapper->field_hebrew_name->value()) {
        $mentionee_fields[] = field_view_field('node', $person_node, 'field_hebrew_name');
      }
      if ($person_wrapper->field_german_name->value()) {
        $mentionee_fields[] = field_view_field('node', $person_node, 'field_german_name');
      }
    }
    if ($mention_wrapper->field_mentionee_description->value()) {
      $mentionee_fields[] = field_view_field('node', $mention_node, 'field_mentionee_description');
    }
    if ($mention_wrapper->field_mentionee_city->value()) {
      $mentionee_fields[] = field_view_field('node', $mention_node, 'field_mentionee_city');
    }
    $mentions_fields[] = $mentionee_fields;
  }
  return $mentions_fields;
}

/*
 * Create array with hebrew letters, not including sofits.
 *
 * @return array
 */
function haskala_book_hebrew_alphabet_without_sofit() {
  return array(
    'א',
    'ב',
    'ג',
    'ד',
    'ה',
    'ו',
    'ז',
    'ח',
    'ט',
    'י',
    'כ',
    'ל',
    'מ',
    'נ',
    'ס',
    'ע',
    'פ',
    'צ',
    'ק',
    'ר',
    'ש',
    'ת',
  );
}

