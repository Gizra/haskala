<?php
/**
 * @file
 * Code for the Haskala Book feature.
 */

include_once 'haskala_book.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function haskala_book_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 *  Translation tab - translator of translation.
 *  Prefaces tab - role in book production of preface writer.
 *  Book producers tab - all fields from production bundle.
 *
 *  @param $book_nid
 *   The book node ID.
 *  @param $person_nid
 *   The writer person node ID.
 *  @param $role
 *   The producer role in book.
 *
 *  @return production details nodes.
 */
function haskala_book_get_production($book_nid, $person_nid = NULL, $role = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'production')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_book', 'target_id', $book_nid);
  if ($person_nid) {
    $query->fieldCondition('field_producer', 'target_id', $person_nid);
  }
  if ($role) {
    $term = taxonomy_get_term_by_name($role);
    $role_tid = key($term);
    $query->fieldCondition('field_role', 'tid', $role_tid);
  }
  $result = $query->execute();
  if (empty($result['node'])) {
    return;
  }
  // If filter by person also, we should get single result.
  if ($person_nid || $role) {
    return node_load(reset($result['node'])->nid);
  }
  return node_load_multiple(array_keys($result['node']));
}

/**
 *  Translator of translation.
 *
 *  @param $book_nid
 *   The book node ID.
 *
 *  @return Translator or orginal author name field.
 */
function haskala_book_get_producer($book_nid, $role) {
  $production_node = haskala_book_get_production($book_nid, NULL, $role);
  if (!$production_node) {
    return;
  }
  return field_view_field('node', $production_node, 'field_producer');
}


/**
 *  Get tab group fields.
 *
 *  @param $wrapper
 *   The wrapper object.
 *  @param $tab
 *   The tab info.
 *  @param $node_view
 *   The node view array for weight field info.
 * @param $book_nid
 *   The book nid.
 *
 *  @return tab fields array.
 */
function haskala_book_get_tab_fields($wrapper, $tab, $node_view, $book_nid) {
  if (empty($tab->children)) {
    return;
  }

  // Sort fields by weight.
  $tab_fields_sorted = array();

  // Tab sub groups fields.
  $sub_tabs_fields = array();

  $node = $wrapper->value();

  foreach ($tab->children as $child_name) {

    // If exist sub group. Ex.:Target audience tab contains sub groups.
    if (substr($child_name, 0, 5) == 'group') {
      $sub_tab = field_group_load_field_group($child_name, 'node', 'book', 'default');
      // Recursive call.
      $sub_tab_fields = haskala_book_get_tab_fields($wrapper, $sub_tab, $node_view, $book_nid);
      if ($sub_tab_fields) {
        $sub_tabs_fields[$child_name] = $sub_tab_fields;
        // Add sub title at the beginning of the array.
        $sub_tabs_fields[$child_name] = array('sub_title' => $sub_tab->label) + $sub_tabs_fields[$child_name];
        $sub_tabs_fields[$child_name]['weight'] = $sub_tab->weight;
      }
    }
    elseif ($node->$child_name) {
      $weight = $node_view[$child_name]['#weight'];
      $tab_fields_sorted[$weight] = $child_name;
    }
  }

  $tab_fields = array();
  if ($sub_tabs_fields) {
    // Sort sub groups by weight.
    uasort($sub_tabs_fields, 'drupal_sort_weight');
    // Delete weight element.
    foreach (array_keys($sub_tabs_fields) as $sub_tab_name){
      unset($sub_tabs_fields[$sub_tab_name]['weight']);
    }
    $tab_fields = $sub_tabs_fields;
  }

  // Fields of the main tab.
  $tab_fields_main = array();
  ksort($tab_fields_sorted);
  foreach ($tab_fields_sorted as $field_name) {
    // Check if the field isn't empty.
    if ($node->$field_name) {
      $field = render($node_view[$field_name]);
      $tab_fields_main[] = $field;

      // Add orginal author name to Type of book tab, if book is a translation.
      if ($field_name == 'field_book') {
        $author_name_field = haskala_book_get_producer($wrapper->$field_name->getIdentifier(), t('Author'));
        if ($author_name_field) {
          $author_name_field['#title'] = t('Author of original');
          $tab_fields_main[] = $author_name_field;
        }
      }
    }
  }


  if ($tab_fields_main) {
    if ($sub_tabs_fields) {
      $tab_fields['main'] = $tab_fields_main;
    }
    else{
      $tab_fields = $tab_fields_main;
    }
  }
  return $tab_fields;
}

/**
 *  Get nodes referencing a book.
 *
 *  @param $book_nid
 *   The book node ID.
 *  @param $bundle
 *   The book node ID.
 *
 *  @return Multi bundle fields.
 */
function haskala_book_get_reference_nodes($book_nid, $bundle) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_book', 'target_id', $book_nid);
  $result = $query->execute();
  if (empty($result['node'])) {
    return;
  }
  return node_load_multiple(array_keys($result['node']));
}

/**
 *  Get nodes reference fields.
 *
 *  @param $book_nid
 *   The book node ID.
 *  @param $bundle
 *   The book node ID.
 *  @param $nodes
 *   Array of nodes.
 *  @param $group_name
 *   The group of fields name .
 *
 *  @return Multi reference nodes fields .
 */
function haskala_book_get_reference_nodes_fields($book_nid, $bundle, $nodes, $group_name) {
  $nodes_fields = array();
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $tab = field_group_load_field_group($group_name, 'node', $bundle, 'default');
    $node_view = node_view($node);
    $node_fields = haskala_book_get_tab_fields($wrapper, $tab, $node_view, $book_nid);
    // Add language translation && translator.
    if ($bundle == 'book') {
      if ($wrapper->field_language->value()) {
        $language_field = render($node_view['field_language']);
        array_unshift($node_fields, $language_field);
      }
      $translator_name_field = haskala_book_get_producer($node->nid, t('Translator'));
      if ($translator_name_field) {
        $translator_name_field['#title'] = t('Translator');
        array_unshift($node_fields, $translator_name_field);
      }
    }
    $nodes_fields[] = $node_fields;
  }
  return $nodes_fields;
}

/**
 *  Editions for Editions tab.
 *
 *  @param $book_nid
 *   The book node ID.
 *
 *  @return Multi editions fields .
 */
function haskala_book_get_editions($book_nid) {
  $editions_nodes = haskala_book_get_reference_nodes($book_nid, 'edition');
  if (!$editions_nodes) {
    return;
  }
  return haskala_book_get_reference_nodes_fields($book_nid, 'edition', $editions_nodes, 'group_editions');
}

/**
 *  Translations for Editions tab.
 *
 *  @param $book_nid
 *   The book node ID.
 *
 *  @return Multi translations fields .
 */
function haskala_book_get_translations($book_nid) {
  $translations_nodes = haskala_book_get_reference_nodes($book_nid, 'book');
  if (!$translations_nodes) {
    return;
  }
  return haskala_book_get_reference_nodes_fields($book_nid, 'book', $translations_nodes, 'group_translation_editions_tab');
}

/**
 *  Persons mentioned in book tab.
 *
 *  @param $book_nid
 *   The book node ID.
 *
 *  @return Multi mentions fields .
 */
function haskala_book_get_mentions($book_nid) {
  $mention_nodes = haskala_book_get_reference_nodes($book_nid, 'mention');
  if (!$mention_nodes) {
    return;
  }
  $mentions_fields = array();
  foreach ($mention_nodes as $mention_node) {
    $mentionee_fields = array();
    $mention_wrapper = entity_metadata_wrapper('node', $mention_node);
    if ($mention_wrapper->field_mentionee->value()) {
      $person_node = node_load($mention_wrapper->field_mentionee->value()->nid);
      $person_wrapper = entity_metadata_wrapper('node', $person_node);
      if ($person_wrapper->field_hebrew_name->value()) {
        $mentionee_fields[] = field_view_field('node', $person_node, 'field_hebrew_name');
      }
      if ($person_wrapper->field_german_name->value()) {
        $mentionee_fields[] = field_view_field('node', $person_node, 'field_german_name');
      }
    }
    if ($mention_wrapper->field_mentionee_description->value()) {
      $mentionee_fields[] = field_view_field('node', $mention_node, 'field_mentionee_description');
    }
    if ($mention_wrapper->field_mentionee_city->value()) {
      $mentionee_fields[] = field_view_field('node', $mention_node, 'field_mentionee_city');
    }
    $mentions_fields[] = $mentionee_fields;
  }
  return $mentions_fields;
}

/*
 * Create array with hebrew letters, not including sofits.
 *
 * @return array
 */
function haskala_book_hebrew_alphabet_without_sofit() {
  return array('א', 'ב', 'ג', 'ד', 'ה', 'ו', 'ז', 'ח', 'ט', 'י', 'כ', 'ל', 'מ', 'נ', 'ס', 'ע', 'פ', 'צ', 'ק', 'ר', 'ש', 'ת');
}

